<?xml version="1.0" standalone="yes"?>

<event_configuration family="19" modellow="10" modelhigh="1f" version="2">
    <!-- Specify a Eventgroup and Each eventgroup can be of type "core" or "l3" or "df"
            1. 4 fixed perf events
            2. 6 Core PMC events or 6 L3 PMC events or 4 DF events
            3. Metrics that can be computed
            4. If a Metric name starts with "$" that will be considered as intermediate result which
               will be used in subsequent metrics and hence this will not be printed.
    -->

    <perf  subtype="perf">
        <event ctl="ff00" name="$TSC"> </event>
        <event ctl="ff01" name="$IRPerf"> </event>
        <event ctl="ff02" name="$APerf"> </event>
        <event ctl="ff03" name="$MPerf"> </event>
    </perf>

    <!-- Core PMC Event groups -->
    <core subtype="ipc">
        <event ctl="0x430076" name="$CpuCycles"> </event>
        <event ctl="0x4300C0" name="$RetdInst"> </event>
        <event ctl="0x4300C2" name="$RetdBrInst"> </event>
        <event ctl="0x4300C3" name="$RetdBrInstMispred"> </event>

        <metric name="Utilization (%)" expression="$MPerf * 100 / $TSC"> </metric>
        <metric name="Eff Freq" expression="($APerf / $MPerf) * $P0Freq"> </metric>
        <metric name="IPC (Sys + User)" expression="$RetdInst / $CpuCycles"> </metric>
        <metric name="CPI (Sys + User)" expression="$CpuCycles / $RetdInst"> </metric>
        <metric name="Branch Misprediction Ratio" expression="$RetdBrInstMispred / $RetdBrInst"> </metric>
    </core>

    <core subtype="fp">
        <event ctl="0x430F03" name="$RetdSseAvxFlops"> </event>
        <!--
        <event ctl="0xf004000ff" name="$RetdSseAvxFlopsMerge"> </event>
        -->
        <event ctl="0x430F0E" name="$FPDispatchFaults"> </event>

        <metric name="$ElapsedTimeinUsFp" expression="$ElapsedTimeinUs / $NbrEventGroups"> </metric>
        <metric name="Retired SSE/AVX GFLOPs" expression="$RetdSseAvxFlops / ($ElapsedTimeinUsFp * 1000)"> </metric>
        <metric name="FP Dispatch Faults (pti)" expression="($FPDispatchFaults * 1000) / $IRPerf"> </metric>
    </core>

   <core subtype="l1">
        <event ctl="0x430729" name="$DCAccess"> </event>
        <event ctl="0x10043078E" name="$ICHit"> </event>
        <event ctl="0x10043188E" name="$ICMiss"> </event>
        <!--<event ctl="0x100431F8E" name="$ICAccess"> </event>-->
        <!--<event ctl="0x20043038F" name="$OpCacheHit"> </event>-->
        <event ctl="0x20043048F" name="$OpCacheMiss"> </event>
        <event ctl="0x20043078F" name="$OpCacheAccess"> </event>

        <metric name="IC Fetch Miss Ratio" expression="($ICMiss / ($ICHit + $ICMiss))"> </metric>
        <metric name="Op Cache Fetch Miss Ratio" expression="($OpCacheMiss / $OpCacheAccess)"> </metric>

        <metric name="IC Access (pti)" expression="($ICHit + $ICMiss) * 1000 / $IRPerf"> </metric>
        <metric name="IC Miss (pti)" expression="$ICMiss * 1000 / $IRPerf"> </metric>
        <metric name="DC Access (pti)" expression="$DCAccess * 1000 / $IRPerf"> </metric>
    </core>

    <core subtype="dc">
      <event ctl="0x430344" name="$DCFillsFromSameCCX"> </event>
      <event ctl="0x430444" name="$DCFillsFromExternalCacheLocal"> </event>
      <event ctl="0x430844" name="$DCFillsFromLocalMemory"> </event>
      <event ctl="0x431044" name="$DCFillsFromExternalCacheRemote"> </event>
      <event ctl="0x434044" name="$DCFillsFromRemoteMemory"> </event>

      <metric name="$AllDCFills" expression="($DCFillsFromSameCCX + $DCFillsFromExternalCacheLocal + $DCFillsFromLocalMemory + $DCFillsFromExternalCacheRemote + $DCFillsFromRemoteMemory)"> </metric>

      <metric name="DC Fills From Same CCX (pti)" expression="$DCFillsFromSameCCX * 1000 / $IRPerf"> </metric>
      <metric name="DC Fills From different CCX in same node (pti)" expression="$DCFillsFromExternalCacheLocal * 1000 / $IRPerf"> </metric>
      <metric name="DC Fills From Local Memory (pti)" expression="$DCFillsFromLocalMemory * 1000 / $IRPerf"> </metric>
      <metric name="DC Fills From Remote CCX Cache (pti)" expression="$DCFillsFromExternalCacheRemote * 1000 / $IRPerf"> </metric>
      <metric name="DC Fills From Remote Memory (pti)" expression="$DCFillsFromRemoteMemory * 1000 / $IRPerf"> </metric>
      <metric name="All DC Fills (pti)" expression="$AllDCFills * 1000 / $IRPerf"> </metric>
    </core>

    <core subtype="l2">
        <event ctl="0x43F960" name="$L2AccessWithoutPF"> </event>
        <event ctl="0x431060" name="$L2AccessFromICMiss"> </event>
        <event ctl="0x43E860" name="$L2AccessFromDCMiss"> </event>
        <event ctl="0x43FF70" name="$L2PFHitinL2"> </event>
        <event ctl="0x43FF71" name="$L2PFMissL2HitinL3"> </event>
        <event ctl="0x43FF72" name="$L2PFMissL2L3"> </event>

        <metric name="$L2PFMissinL2" expression="($L2PFMissL2HitinL3 + $L2PFMissL2L3)"> </metric>
    </core>

    <core subtype="l2">
        <event ctl="0x430164" name="$L2MissIC"> </event>
        <event ctl="0x430864" name="$L2MissDC"> </event>
        <event ctl="0x430664" name="$L2HitIC"> </event>
        <event ctl="0x43F064" name="$L2HitDC"> </event>
        <event ctl="0x43F664" name="$L2HitWithoutPF"> </event>

        <metric name="$L2Miss" expression="$L2MissIC + $L2MissDC"> </metric>

        <metric name="L2 Access (pti)" expression="(($L2AccessWithoutPF + $L2PFHitinL2 + $L2PFMissL2HitinL3 + $L2PFMissL2L3) * 1000) / $IRPerf"> </metric>
        <metric name="L2 Access from IC Miss (pti)" expression="($L2AccessFromICMiss * 1000 / $IRPerf)"> </metric>
        <metric name="L2 Access from DC Miss (pti)" expression="($L2AccessFromDCMiss * 1000 / $IRPerf)"> </metric>
        <metric name="L2 Access from HWPF (pti)" expression="(($L2PFHitinL2 + $L2PFMissL2HitinL3 + $L2PFMissL2L3) * 1000) / $IRPerf"> </metric>

        <metric name="L2 Miss (pti)" expression="(($L2Miss * 1000 / $IRPerf) + ($L2PFMissinL2 * 1000 / $IRPerf))"> </metric>
        <metric name="L2 Miss from IC Miss (pti)" expression="($L2MissIC * 1000 / $IRPerf)"> </metric>
        <metric name="L2 Miss from DC Miss (pti)" expression="($L2MissDC * 1000 / $IRPerf)"> </metric>
        <metric name="L2 Miss from HWPF (pti)" expression="($L2PFMissinL2 * 1000 / $IRPerf)"> </metric>

        <metric name="L2 Hit (pti)" expression="(($L2HitWithoutPF * 1000 / $IRPerf) + ($L2PFHitinL2 * 1000 / $IRPerf))"> </metric>
        <metric name="L2 Hit from IC Miss (pti)" expression="($L2HitIC * 1000 / $IRPerf)"> </metric>
        <metric name="L2 Hit from DC Miss (pti)" expression="($L2HitDC * 1000 / $IRPerf)"> </metric>
        <metric name="L2 Hit from HWPF (pti)" expression="($L2PFHitinL2 * 1000 / $IRPerf)"> </metric>
    </core>

    <core subtype="tlb">
        <event ctl="0x430084" name="$L1ItlbMissL2TlbHit"> </event>
        <event ctl="0x430785" name="$L1ItlbMissL2TlbMiss"> </event>
        <event ctl="0x43FF45" name="$L1DtlbMiss"> </event>
        <event ctl="0x43F045" name="$L2DtlbMiss"> </event>
        <event ctl="0x43FF78" name="$TLBFlushes"> </event>

        <metric name="L1 ITLB Miss (pti)" expression="(($L1ItlbMissL2TlbHit + $L1ItlbMissL2TlbMiss) * 1000) / $IRPerf"> </metric>
        <metric name="L2 ITLB Miss (pti)" expression="($L1ItlbMissL2TlbMiss * 1000) / $IRPerf"> </metric>
        <metric name="L1 DTLB Miss (pti)" expression="($L1DtlbMiss * 1000) / $IRPerf"> </metric>
        <metric name="L2 DTLB Miss (pti)" expression="($L2DtlbMiss * 1000) / $IRPerf"> </metric>
        <metric name="All TLBs Flushed (pti)" expression="$TLBFlushes * 1000 / $IRPerf"> </metric>
    </core>

    <core subtype="topdown">
        <event ctl="0x000430076" name="$TDCycles01"> </event>
        <event ctl="0x0004300c1" name="$TDRetiredOps"> </event>
        <event ctl="0x1004300c2" name="$TDRetireUcode"> </event>
        <event ctl="0x0004307aa" name="$TDDispatchedOps"> </event>
        <event ctl="0x0004300c3" name="$TDRetiredExRedir"> </event>
        <event ctl="0x000430096" name="$TDResync"> </event>
    </core>

    <core subtype="topdown">
        <event ctl="0x000430076" name="$TDCycles02"> </event>
        <event ctl="0x100431ea0" name="$TDBackEndStall"> </event>
        <event ctl="0x1004360a0" name="$TDThreadSelGoodBadStall"> </event>
        <event ctl="0x1004330a2" name="$TDAboveLdqOrIntSchedLmt"> </event>
        <event ctl="0x00043a6d2" name="$NoRetireMissingLSCompSelfOlder"> </event>
        <event ctl="0x0004306d2" name="$NoRetireNotCompSelfOlder"> </event>
    </core>

    <core subtype="topdown">
        <event ctl="0x000430076" name="$TDCycles03"> </event>
        <event ctl="0x1004301a0" name="$TDEmptyStall"> </event>
        <event ctl="0x1064301a0" name="$TDDispatchAllEmpty"> </event>
        <event ctl="0x4300C0" name="$TDRetdInst"> </event>

        <metric name="$TotalDispSlots" expression="($TDCycles01 + $TDCycles02 + $TDCycles03) * 6"> </metric>
        <metric name="$SmtGoodBadStall" expression="$TDThreadSelGoodBadStall / $TDCycles02"> </metric>

        <metric name="$TopDownFrontendBound" expression="100 * ($TDEmptyStall / $TDCycles03) / 6"> </metric>
        <metric name="$TopDownFrontendBoundLatency" expression="100 * 6 * $TDDispatchAllEmpty / ( 6 * $TDCycles03)"> </metric>
        <metric name="$TopDownFrontendBoundBw" expression="100 * ($TDEmptyStall - 6 * $TDDispatchAllEmpty) / ( 6 * $TDCycles03)"> </metric>

        <metric name="$TopDownBadSpeculation" expression="100 * ($TDDispatchedOps - $TDRetiredOps) / ($TDCycles01 * 6)"> </metric>
        <metric name="$BadSpeculationMispred" expression="$TopDownBadSpeculation * $TDRetiredExRedir / ($TDRetiredExRedir + $TDResync)"> </metric>
        <metric name="$BadSpeculationResync" expression="$TopDownBadSpeculation * $TDResync / ($TDRetiredExRedir + $TDResync)"> </metric>

        <metric name="$TopDownBackendBoundRaw" expression="100 * ($TDBackEndStall / $TDCycles02) / 6"> </metric>
        <metric name="$TopDownBackendBound" expression="$TopDownBackendBoundRaw + (100 * $SmtGoodBadStall / 6) * ($TDAboveLdqOrIntSchedLmt / $TDCycles02)"> </metric>
        <metric name="$BackendBoundMemory" expression="$TopDownBackendBound * $NoRetireMissingLSCompSelfOlder / $NoRetireNotCompSelfOlder"> </metric>
        <metric name="$BackendBoundCpu" expression="$TopDownBackendBound * ($NoRetireNotCompSelfOlder - $NoRetireMissingLSCompSelfOlder) / $NoRetireNotCompSelfOlder"> </metric>

        <metric name="$TopDownRetiring" expression="100 * $TDRetiredOps / ($TDCycles01 * 6)"> </metric>
        <metric name="$RetireLight" expression="$TopDownRetiring * ($TDRetiredOps - $TDRetireUcode) / $TDRetiredOps"> </metric>
        <metric name="$RetireHeavy" expression="$TopDownRetiring * $TDRetireUcode / $TDRetiredOps"> </metric>

        <metric name="$TopDownSmtContRaw" expression="100 * $SmtGoodBadStall / 6"> </metric>
        <metric name="$TopDownSmtCont" expression="$TopDownSmtContRaw * (1 - $TDAboveLdqOrIntSchedLmt / $TDCycles02)"> </metric>

        <metric name="$TopDownL1Sum" expression="$TopDownFrontendBound + $TopDownBadSpeculation + $TopDownBackendBound + $TopDownRetiring + $TopDownSmtCont"> </metric>

        <metric name="Total_Dispatch_Slots" expression="$TotalDispSlots" level=1> </metric>
        <metric name="SMT_Disp_contention" expression="$TopDownSmtCont" level=1> </metric>
        <metric name="Frontend_Bound" expression="$TopDownFrontendBound" level=1> </metric>
        <metric name="Bad_Speculation" expression="$TopDownBadSpeculation" level=1> </metric>
        <metric name="Backend_Bound" expression="$TopDownBackendBound" level=1> </metric>
        <metric name="Retiring" expression="$TopDownRetiring" level=1> </metric>
        <metric name="IPC" expression="$TDRetdInst / $TDCycles03"> </metric>

        <metric name="Frontend_Bound.Latency" expression="$TopDownFrontendBoundLatency" level=2> </metric>
        <metric name="Frontend_Bound.BW" expression="$TopDownFrontendBoundBw" level=2> </metric>
        <metric name="Bad_Speculation.Mispredicts" expression="$BadSpeculationMispred" level=2> </metric>
        <metric name="Bad_Speculation.Pipeline_Restarts" expression="$BadSpeculationResync" level=2> </metric>
        <metric name="Backend_Bound.Memory" expression="$BackendBoundMemory" level=2> </metric>
        <metric name="Backend_Bound.CPU" expression="$BackendBoundCpu" level=2> </metric>
        <metric name="Retiring.Fastpath" expression="$RetireLight" level=2> </metric>
        <metric name="Retiring.Microcode" expression="$RetireHeavy" level=2> </metric>
    </core>

    <l3 subtype="l3">
        <event ctl="0x0303c0000040ff04" name="$L3Access"> </event>
        <event ctl="0x0303c00000400104" name="$L3Miss"> </event>
        <event ctl="0x0303c00000400090" name="$L3MissLatency"> </event>
        <event ctl="0x0303c00000401f9a" name="$L3MissByType"> </event>

        <metric name="L3 Access" expression="$L3Access"> </metric>
        <metric name="L3 Miss" expression="$L3Miss"> </metric>
        <metric name="L3 Miss %" expression="($L3Miss * 100) / $L3Access"> </metric>
        <metric name="Ave L3 Miss Latency" expression="($L3MissLatency * 16) / $L3MissByType"> </metric>
    </l3>

    <!--DRAM READ DATA BYTES FOR LOCAL PROCESSOR-->
    <df subtype="memory">
        <event ctl="0x000000000740FE1F" name="$DramLocalRdEv0"> </event>
        <event ctl="0x000000000740FE5F" name="$DramLocalRdEv1"> </event>
        <event ctl="0x000000000740FE9F" name="$DramLocalRdEv2"> </event>
        <event ctl="0x000000000740FEDF" name="$DramLocalRdEv3"> </event>
        <event ctl="0x000000010740FE1F" name="$DramLocalRdEv4"> </event>
        <event ctl="0x000000010740FE5F" name="$DramLocalRdEv5"> </event>
        <event ctl="0x000000010740FE9F" name="$DramLocalRdEv6"> </event>
        <event ctl="0x000000010740FEDF" name="$DramLocalRdEv7"> </event>
        <event ctl="0x000000020740FE1F" name="$DramLocalRdEv8"> </event>
        <event ctl="0x000000020740FE5F" name="$DramLocalRdEv9"> </event>
        <event ctl="0x000000020740FE9F" name="$DramLocalRdEv10"> </event>
        <event ctl="0x000000020740FEDF" name="$DramLocalRdEv11"> </event>
    </df>

    <!--DRAM WRITE DATA BYTES FOR LOCAL PROCESSOR-->
    <df subtype="memory">
        <event ctl="0x000000000740FF1F" name="$DramLocalWrEv0"> </event>
        <event ctl="0x000000000740FF5F" name="$DramLocalWrEv1"> </event>
        <event ctl="0x000000000740FF9F" name="$DramLocalWrEv2"> </event>
        <event ctl="0x000000000740FFDF" name="$DramLocalWrEv3"> </event>
        <event ctl="0x000000010740FF1F" name="$DramLocalWrEv4"> </event>
        <event ctl="0x000000010740FF5F" name="$DramLocalWrEv5"> </event>
        <event ctl="0x000000010740FF9F" name="$DramLocalWrEv6"> </event>
        <event ctl="0x000000010740FFDF" name="$DramLocalWrEv7"> </event>
        <event ctl="0x000000020740FF1F" name="$DramLocalWrEv8"> </event>
        <event ctl="0x000000020740FF5F" name="$DramLocalWrEv9"> </event>
        <event ctl="0x000000020740FF9F" name="$DramLocalWrEv10"> </event>
        <event ctl="0x000000020740FFDF" name="$DramLocalWrEv11"> </event>
    </df>

    <!--DRAM READ DATA BYTES FOR REMOTE PROCESSOR-->
    <df subtype="memory">
        <event ctl="0x000000000B40FE1F" name="$DramRemoteRdEv0"> </event>
        <event ctl="0x000000000B40FE5F" name="$DramRemoteRdEv1"> </event>
        <event ctl="0x000000000B40FE9F" name="$DramRemoteRdEv2"> </event>
        <event ctl="0x000000000B40FEDF" name="$DramRemoteRdEv3"> </event>
        <event ctl="0x000000010B40FE1F" name="$DramRemoteRdEv4"> </event>
        <event ctl="0x000000010B40FE5F" name="$DramRemoteRdEv5"> </event>
        <event ctl="0x000000010B40FE9F" name="$DramRemoteRdEv6"> </event>
        <event ctl="0x000000010B40FEDF" name="$DramRemoteRdEv7"> </event>
        <event ctl="0x000000020B40FE1F" name="$DramRemoteRdEv8"> </event>
        <event ctl="0x000000020B40FE5F" name="$DramRemoteRdEv9"> </event>
        <event ctl="0x000000020B40FE9F" name="$DramRemoteRdEv10"> </event>
        <event ctl="0x000000020B40FEDF" name="$DramRemoteRdEv11"> </event>
    </df>

    <!--DRAM WRITE DATA BYTES FOR REMOTE PROCESSOR-->
    <df subtype="memory">
        <event ctl="0x000000000B40FF1F" name="$DramRemoteWrEv0"> </event>
        <event ctl="0x000000000B40FF5F" name="$DramRemoteWrEv1"> </event>
        <event ctl="0x000000000B40FF9F" name="$DramRemoteWrEv2"> </event>
        <event ctl="0x000000000B40FFDF" name="$DramRemoteWrEv3"> </event>
        <event ctl="0x000000010B40FF1F" name="$DramRemoteWrEv4"> </event>
        <event ctl="0x000000010B40FF5F" name="$DramRemoteWrEv5"> </event>
        <event ctl="0x000000010B40FF9F" name="$DramRemoteWrEv6"> </event>
        <event ctl="0x000000010B40FFDF" name="$DramRemoteWrEv7"> </event>
        <event ctl="0x000000020B40FF1F" name="$DramRemoteWrEv8"> </event>
        <event ctl="0x000000020B40FF5F" name="$DramRemoteWrEv9"> </event>
        <event ctl="0x000000020B40FF9F" name="$DramRemoteWrEv10"> </event>
        <event ctl="0x000000020B40FFDF" name="$DramRemoteWrEv11"> </event>

        <metric name="$TotalDramLocalRdBw" expression="($DramLocalRdEv0 + $DramLocalRdEv1 + $DramLocalRdEv2 + $DramLocalRdEv3 + $DramLocalRdEv4 + $DramLocalRdEv5 + $DramLocalRdEv6 + $DramLocalRdEv7 + $DramLocalRdEv8 + $DramLocalRdEv9 + $DramLocalRdEv10 + $DramLocalRdEv11)"> </metric>
        <metric name="$TotalDramLocalWrBw" expression="($DramLocalWrEv0 + $DramLocalWrEv1 + $DramLocalWrEv2 + $DramLocalWrEv3 + $DramLocalWrEv4 + $DramLocalWrEv5 + $DramLocalWrEv6 + $DramLocalWrEv7 + $DramLocalWrEv8 + $DramLocalWrEv9 + $DramLocalWrEv10 + $DramLocalWrEv11)"> </metric>
        <metric name="$TotalDramRemoteRdBw" expression="($DramRemoteRdEv0 + $DramRemoteRdEv1 + $DramRemoteRdEv2 + $DramRemoteRdEv3 + $DramRemoteRdEv4 + $DramRemoteRdEv5 + $DramRemoteRdEv6 + $DramRemoteRdEv7 + $DramRemoteRdEv8 + $DramRemoteRdEv9 + $DramRemoteRdEv10 + $DramRemoteRdEv11)"> </metric>
        <metric name="$TotalDramRemoteWrBw" expression="($DramRemoteWrEv0 + $DramRemoteWrEv1 + $DramRemoteWrEv2 + $DramRemoteWrEv3 + $DramRemoteWrEv4 + $DramRemoteWrEv5 + $DramRemoteWrEv6 + $DramRemoteWrEv7 + $DramRemoteWrEv8 + $DramRemoteWrEv9 + $DramRemoteWrEv10 + $DramRemoteWrEv11)"> </metric>

        <metric name="$ElapsedTimeinUsMem" expression="$ElapsedTimeinUs / $NbrEventGroups"> </metric>
        <metric name="Total Memory Bw (GB/s)" expression="(64 * ($TotalDramLocalRdBw + $TotalDramLocalWrBw + $TotalDramRemoteRdBw + $TotalDramRemoteWrBw)) / ($ElapsedTimeinUsMem * 1000)"> </metric>

        <metric name="Mem Ch-A RdBw (GB/s)" abbrev="MemCh3RdBw" expression="(64 * ($DramLocalRdEv3 + $DramRemoteRdEv3)) / ($ElapsedTimeinUsMem * 1000)" aggr="F"> </metric>
        <metric name="Mem Ch-A WrBw (GB/s)" abbrev="MemCh3WrBw" expression="(64 * ($DramLocalWrEv3 + $DramRemoteWrEv3)) / ($ElapsedTimeinUsMem * 1000)" aggr="F"> </metric>
        <metric name="Mem Ch-B RdBw (GB/s)" abbrev="MemCh4RdBw" expression="(64 * ($DramLocalRdEv4 + $DramRemoteRdEv4)) / ($ElapsedTimeinUsMem * 1000)" aggr="F"> </metric>
        <metric name="Mem Ch-B WrBw (GB/s)" abbrev="MemCh4WrBw" expression="(64 * ($DramLocalWrEv4 + $DramRemoteWrEv4)) / ($ElapsedTimeinUsMem * 1000)" aggr="F"> </metric>
        <metric name="Mem Ch-C RdBw (GB/s)" abbrev="MemCh0RdBw" expression="(64 * ($DramLocalRdEv0 + $DramRemoteRdEv0)) / ($ElapsedTimeinUsMem * 1000)" aggr="F"> </metric>
        <metric name="Mem Ch-C WrBw (GB/s)" abbrev="MemCh0WrBw" expression="(64 * ($DramLocalWrEv0 + $DramRemoteWrEv0)) / ($ElapsedTimeinUsMem * 1000)" aggr="F"> </metric>
        <metric name="Mem Ch-D RdBw (GB/s)" abbrev="MemCh5RdBw" expression="(64 * ($DramLocalRdEv5 + $DramRemoteRdEv5)) / ($ElapsedTimeinUsMem * 1000)" aggr="F"> </metric>
        <metric name="Mem Ch-D WrBw (GB/s)" abbrev="MemCh5WrBw" expression="(64 * ($DramLocalWrEv5 + $DramRemoteWrEv5)) / ($ElapsedTimeinUsMem * 1000)" aggr="F"> </metric>
        <metric name="Mem Ch-E RdBw (GB/s)" abbrev="MemCh1RdBw" expression="(64 * ($DramLocalRdEv1 + $DramRemoteRdEv1)) / ($ElapsedTimeinUsMem * 1000)" aggr="F"> </metric>
        <metric name="Mem Ch-E WrBw (GB/s)" abbrev="MemCh1WrBw" expression="(64 * ($DramLocalWrEv1 + $DramRemoteWrEv1)) / ($ElapsedTimeinUsMem * 1000)" aggr="F"> </metric>
        <metric name="Mem Ch-F RdBw (GB/s)" abbrev="MemCh2RdBw" expression="(64 * ($DramLocalRdEv2 + $DramRemoteRdEv2)) / ($ElapsedTimeinUsMem * 1000)" aggr="F"> </metric>
        <metric name="Mem Ch-F WrBw (GB/s)" abbrev="MemCh2WrBw" expression="(64 * ($DramLocalWrEv2 + $DramRemoteWrEv2)) / ($ElapsedTimeinUsMem * 1000)" aggr="F"> </metric>
        <metric name="Mem Ch-G RdBw (GB/s)" abbrev="MemCh9RdBw" expression="(64 * ($DramLocalRdEv9 + $DramRemoteRdEv9)) / ($ElapsedTimeinUsMem * 1000)" aggr="F"> </metric>
        <metric name="Mem Ch-G WrBw (GB/s)" abbrev="MemCh9WrBw" expression="(64 * ($DramLocalWrEv9 + $DramRemoteWrEv9)) / ($ElapsedTimeinUsMem * 1000)" aggr="F"> </metric>
        <metric name="Mem Ch-H RdBw (GB/s)" abbrev="MemCh10RdBw" expression="(64 * ($DramLocalRdEv10 + $DramRemoteRdEv10)) / ($ElapsedTimeinUsMem * 1000)" aggr="F"> </metric>
        <metric name="Mem Ch-H WrBw (GB/s)" abbrev="MemCh10WrBw" expression="(64 * ($DramLocalWrEv10 + $DramRemoteWrEv10)) / ($ElapsedTimeinUsMem * 1000)" aggr="F"> </metric>
        <metric name="Mem Ch-I RdBw (GB/s)" abbrev="MemCh6RdBw" expression="(64 * ($DramLocalRdEv6 + $DramRemoteRdEv6)) / ($ElapsedTimeinUsMem * 1000)" aggr="F"> </metric>
        <metric name="Mem Ch-I WrBw (GB/s)" abbrev="MemCh6WrBw" expression="(64 * ($DramLocalWrEv6 + $DramRemoteWrEv6)) / ($ElapsedTimeinUsMem * 1000)" aggr="F"> </metric>
        <metric name="Mem Ch-J RdBw (GB/s)" abbrev="MemCh11RdBw" expression="(64 * ($DramLocalRdEv11 + $DramRemoteRdEv11)) / ($ElapsedTimeinUsMem * 1000)" aggr="F"> </metric>
        <metric name="Mem Ch-J WrBw (GB/s)" abbrev="MemCh11WrBw" expression="(64 * ($DramLocalWrEv11 + $DramRemoteWrEv11)) / ($ElapsedTimeinUsMem * 1000)" aggr="F"> </metric>
        <metric name="Mem Ch-K RdBw (GB/s)" abbrev="MemCh7RdBw" expression="(64 * ($DramLocalRdEv7 + $DramRemoteRdEv7)) / ($ElapsedTimeinUsMem * 1000)" aggr="F"> </metric>
        <metric name="Mem Ch-K WrBw (GB/s)" abbrev="MemCh7WrBw" expression="(64 * ($DramLocalWrEv7 + $DramRemoteWrEv7)) / ($ElapsedTimeinUsMem * 1000)" aggr="F"> </metric>
        <metric name="Mem Ch-L RdBw (GB/s)" abbrev="MemCh8RdBw" expression="(64 * ($DramLocalRdEv8 + $DramRemoteRdEv8)) / ($ElapsedTimeinUsMem * 1000)" aggr="F"> </metric>
        <metric name="Mem Ch-L WrBw (GB/s)" abbrev="MemCh8WrBw" expression="(64 * ($DramLocalWrEv8 + $DramRemoteWrEv8)) / ($ElapsedTimeinUsMem * 1000)" aggr="F"> </metric>

        <!--DRAM Read/Write DATA BYTES FOR LOCAL PROCESSOR-->
        <metric name="Local DRAM Read Write Data Bytes (GB/s)" expression="(64 * ($TotalDramLocalRdBw + $TotalDramLocalWrBw)) / ($ElapsedTimeinUsMem * 1000)"> </metric>
        <metric name="Local DRAM Read Data Bytes(GB/s)" expression="(64 * $TotalDramLocalRdBw) / ($ElapsedTimeinUsMem * 1000)"> </metric>

        <metric name="Local DRAM Write Data Bytes(GB/s)" expression="(64 * $TotalDramLocalWrBw) / ($ElapsedTimeinUsMem * 1000)"> </metric>

        <!--DRAM READ/Write DATA BYTES FOR REMOTE PROCESSOR-->
        <metric name="Remote DRAM Read Write Data Bytes (GB/s)" expression="(64 * ($TotalDramRemoteRdBw + $TotalDramRemoteWrBw)) / ($ElapsedTimeinUsMem * 1000)"> </metric>
        <metric name="Remote DRAM Read Data Bytes (GB/s)" expression="(64 * $TotalDramRemoteRdBw) / ($ElapsedTimeinUsMem * 1000)"> </metric>

        <metric name="DRAM Write Data Bytes for Remote Processor (GB/s)" expression="(64 * $TotalDramRemoteWrBw) / ($ElapsedTimeinUsMem * 1000)"> </metric>
    </df>

    <df subtype="dma">
        <!--LOCAL UPSTREAM DMA READ-->
        <event ctl="0x000000080740FE1F" name="$DmaLocalRdEv0"> </event>
        <event ctl="0x000000080740FE5F" name="$DmaLocalRdEv1"> </event>
        <event ctl="0x000000080740FE9F" name="$DmaLocalRdEv2"> </event>
        <event ctl="0x000000080740FEDF" name="$DmaLocalRdEv3"> </event>
        <!--LOCAL UPSTREAM DMA WRITE-->
        <event ctl="0x000000080740FF1F" name="$DmaLocalWrEv0"> </event>
        <event ctl="0x000000080740FF5F" name="$DmaLocalWrEv1"> </event>
        <event ctl="0x000000080740FF9F" name="$DmaLocalWrEv2"> </event>
        <event ctl="0x000000080740FFDF" name="$DmaLocalWrEv3"> </event>
        <!--REMOTE UPSTREAM DMA READ-->
        <event ctl="0x000000080B40FE1F" name="$DmaRemoteRdEv0"> </event>
        <event ctl="0x000000080B40FE5F" name="$DmaRemoteRdEv1"> </event>
        <event ctl="0x000000080B40FE9F" name="$DmaRemoteRdEv2"> </event>
        <event ctl="0x000000080B40FEDF" name="$DmaRemoteRdEv3"> </event>
        <!--REMOTE UPSTREAM DMA WRITE-->
        <event ctl="0x000000080B40FF1F" name="$DmaRemoteWrEv0"> </event>
        <event ctl="0x000000080B40FF5F" name="$DmaRemoteWrEv1"> </event>
        <event ctl="0x000000080B40FF9F" name="$DmaRemoteWrEv2"> </event>
        <event ctl="0x000000080B40FFDF" name="$DmaRemoteWrEv3"> </event>

        <metric name="$ElapsedTimeinUsMem" expression="$ElapsedTimeinUs / $NbrEventGroups"> </metric>

        <!--LOCAL UPSTREAM DMA READ WRITE-->
        <metric name="$TotalDmaLocalRdBw" expression="($DmaLocalRdEv0 + $DmaLocalRdEv1 + $DmaLocalRdEv2 + $DmaLocalRdEv3)"> </metric>
        <metric name="Local Upstream DMA Read Data Bytes (GB/s)" expression="(64 * $TotalDmaLocalRdBw) / ($ElapsedTimeinUsMem * 1000)"> </metric>

        <metric name="$TotalDmaLocalWrBw" expression="($DmaLocalWrEv0 + $DmaLocalWrEv0 + $DmaLocalWrEv0 + $DmaLocalWrEv0)"> </metric>
        <metric name="Local Upstream DMA Write Data Bytes (GB/s)" expression="(64 * $TotalDmaLocalWrBw) / ($ElapsedTimeinUsMem * 1000)"> </metric>
        <metric name="Local Upstream DMA Read Write Data Bytes(GB/s)" expression="(64 * ($TotalDmaLocalRdBw + $TotalDmaLocalWrBw)) / ($ElapsedTimeinUsMem * 1000)"> </metric>

        <!--REMOTE UPSTREAM DMA READ WRITE-->
        <metric name="$TotalDmaRemoteRdBw" expression="($DmaRemoteRdEv0 + $DmaRemoteRdEv1 + $DmaRemoteRdEv2 + $DmaRemoteRdEv3)"> </metric>
        <metric name="Remote Upstream DMA Read Data Bytes (GB/s)" expression="(64 * $TotalDmaRemoteRdBw) / ($ElapsedTimeinUsMem * 1000)"> </metric>

        <metric name="$TotalDmaRemoteWrBw" expression="($DmaRemoteWrEv0 + $DmaRemoteWrEv0 + $DmaRemoteWrEv0 + $DmaRemoteWrEv0)"> </metric>
        <metric name="Remote Upstream DMA Write Data Bytes (GB/s)" expression="(64 * $TotalDmaRemoteWrBw) / ($ElapsedTimeinUsMem * 1000)"> </metric>
        <metric name="Remote Upstream DMA Read Write Data Bytes (GB/s)" expression="(64 * ($TotalDmaRemoteRdBw + $TotalDmaRemoteWrBw)) / ($ElapsedTimeinUsMem * 1000)"> </metric>

    </df>

    <!--LOCAL INBOUND READ DATA BYTES TO CPU-->
    <df subtype="xgmi">
        <event ctl="0x000000040740FE1E" name="$InbLocalRdEv0"> </event>
        <event ctl="0x000000040740FE1F" name="$InbLocalRdEv1"> </event>
        <event ctl="0x000000040740FE5E" name="$InbLocalRdEv2"> </event>
        <event ctl="0x000000040740FE5F" name="$InbLocalRdEv3"> </event>
        <event ctl="0x000000040740FE9E" name="$InbLocalRdEv4"> </event>
        <event ctl="0x000000040740FE9F" name="$InbLocalRdEv5"> </event>
        <event ctl="0x000000040740FEDE" name="$InbLocalRdEv6"> </event>
        <event ctl="0x000000040740FEDF" name="$InbLocalRdEv7"> </event>
        <event ctl="0x000000050740FE1E" name="$InbLocalRdEv8"> </event>
        <event ctl="0x000000050740FE1F" name="$InbLocalRdEv9"> </event>
        <event ctl="0x000000050740FE1F" name="$InbLocalRdEv10"> </event>
        <event ctl="0x000000050740FE5F" name="$InbLocalRdEv11"> </event>
        <event ctl="0x000000050740FE9E" name="$InbLocalRdEv12"> </event>
        <event ctl="0x000000050740FE9F" name="$InbLocalRdEv13"> </event>
        <event ctl="0x000000050740FEDE" name="$InbLocalRdEv14"> </event>
        <event ctl="0x000000050740FEDF" name="$InbLocalRdEv15"> </event>
    </df>

    <!--LOCAL OUTBOUND WRITE DATA BYTES TO CPU-->
    <df subtype="xgmi">
        <event ctl="0x000000040740FF1E" name="$OutLocalWrEv0"> </event>
        <event ctl="0x000000040740FF1F" name="$OutLocalWrEv1"> </event>
        <event ctl="0x000000040740FF5E" name="$OutLocalWrEv2"> </event>
        <event ctl="0x000000040740FF5F" name="$OutLocalWrEv3"> </event>
        <event ctl="0x000000040740FF9E" name="$OutLocalWrEv4"> </event>
        <event ctl="0x000000040740FF9F" name="$OutLocalWrEv5"> </event>
        <event ctl="0x000000040740FFDE" name="$OutLocalWrEv6"> </event>
        <event ctl="0x000000040740FFDF" name="$OutLocalWrEv7"> </event>
        <event ctl="0x000000050740FF1E" name="$OutLocalWrEv8"> </event>
        <event ctl="0x000000050740FF1F" name="$OutLocalWrEv9"> </event>
        <event ctl="0x000000050740FF5E" name="$OutLocalWrEv10"> </event>
        <event ctl="0x000000050740FF5F" name="$OutLocalWrEv11"> </event>
        <event ctl="0x000000050740FF9E" name="$OutLocalWrEv12"> </event>
        <event ctl="0x000000050740FF9F" name="$OutLocalWrEv13"> </event>
        <event ctl="0x000000050740FFDE" name="$OutLocalWrEv14"> </event>
        <event ctl="0x000000050740FFDF" name="$OutLocalWrEv15"> </event>
    </df>

    <!--REMOTE INBOUND READ DATA BYTES TO CPU-->
    <df subtype="xgmi">
        <event ctl="0x000000040B40FE1E" name="$InbRemoteRdEv0"> </event>
        <event ctl="0x000000040B40FE1F" name="$InbRemoteRdEv1"> </event>
        <event ctl="0x000000040B40FE5E" name="$InbRemoteRdEv2"> </event>
        <event ctl="0x000000040B40FE5F" name="$InbRemoteRdEv3"> </event>
        <event ctl="0x000000040B40FE9E" name="$InbRemoteRdEv4"> </event>
        <event ctl="0x000000040B40FE9F" name="$InbRemoteRdEv5"> </event>
        <event ctl="0x000000040B40FEDE" name="$InbRemoteRdEv6"> </event>
        <event ctl="0x000000040B40FEDF" name="$InbRemoteRdEv7"> </event>
        <event ctl="0x000000050B40FE1E" name="$InbRemoteRdEv8"> </event>
        <event ctl="0x000000050B40FE1F" name="$InbRemoteRdEv9"> </event>
        <event ctl="0x000000050B40FE5E" name="$InbRemoteRdEv10"> </event>
        <event ctl="0x000000050B40FE5F" name="$InbRemoteRdEv11"> </event>
        <event ctl="0x000000050B40FE9E" name="$InbRemoteRdEv12"> </event>
        <event ctl="0x000000050B40FE9F" name="$InbRemoteRdEv13"> </event>
        <event ctl="0x000000050B40FEDE" name="$InbRemoteRdEv14"> </event>
        <event ctl="0x000000050B40FEDF" name="$InbRemoteRdEv15"> </event>
    </df>

    <!--REMOTE OUTBOUND WRITE DATA BYTES TO CPU-->
    <df subtype="xgmi">
        <event ctl="0x000000040B40FF1E" name="$OutRemoteWrEv0"> </event>
        <event ctl="0x000000040B40FF1F" name="$OutRemoteWrEv1"> </event>
        <event ctl="0x000000040B40FF5E" name="$OutRemoteWrEv2"> </event>
        <event ctl="0x000000040B40FF5F" name="$OutRemoteWrEv3"> </event>
        <event ctl="0x000000040B40FF9E" name="$OutRemoteWrEv4"> </event>
        <event ctl="0x000000040B40FF9F" name="$OutRemoteWrEv5"> </event>
        <event ctl="0x000000040B40FFDE" name="$OutRemoteWrEv6"> </event>
        <event ctl="0x000000040B40FFDF" name="$OutRemoteWrEv7"> </event>
        <event ctl="0x000000050B40FF1E" name="$OutRemoteWrEv8"> </event>
        <event ctl="0x000000050B40FF1F" name="$OutRemoteWrEv9"> </event>
        <event ctl="0x000000050B40FF5E" name="$OutRemoteWrEv10"> </event>
        <event ctl="0x000000050B40FF5F" name="$OutRemoteWrEv11"> </event>
        <event ctl="0x000000050B40FF9E" name="$OutRemoteWrEv12"> </event>
        <event ctl="0x000000050B40FF9F" name="$OutRemoteWrEv13"> </event>
        <event ctl="0x000000050B40FFDE" name="$OutRemoteWrEv14"> </event>
        <event ctl="0x000000050B40FFDF" name="$OutRemoteWrEv15"> </event>
    </df>

    <!--LOCAL OUTBOUND DATA BYTES FROM ALL LINKS-->
    <df subtype="xgmi">
        <event ctl="0x0000000B0F403E5F" name="$OutLocalAll0"> </event>
        <event ctl="0x0000000B0F403E9F" name="$OutLocalAll1"> </event>
        <event ctl="0x0000000B0F403EDF" name="$OutLocalAll2"> </event>
        <event ctl="0x0000000C0F403E1F" name="$OutLocalAll3"> </event>
        <event ctl="0x0000000C0F403E5F" name="$OutLocalAll4"> </event>
        <event ctl="0x0000000C0F403E9F" name="$OutLocalAll5"> </event>
        <event ctl="0x0000000C0F403EDF" name="$OutLocalAll6"> </event>
        <event ctl="0x0000000D0F403E1F" name="$OutLocalAll7"> </event>

        <metric name="$ElapsedTimeinUsMem" expression="$ElapsedTimeinUs / $NbrEventGroups"> </metric>

        <!--LOCAL INBOUND READ DATA BYTES TO CPU-->
        <metric name="$TotalInbLocalRdBw" expression="($InbLocalRdEv0 + $InbLocalRdEv1 + $InbLocalRdEv2 + $InbLocalRdEv3 + $InbLocalRdEv4 + $InbLocalRdEv5 + $InbLocalRdEv6 + $InbLocalRdEv7 + $InbLocalRdEv8 + $InbLocalRdEv9 + $InbLocalRdEv10 + $InbLocalRdEv11 + $InbLocalRdEv12 + $InbLocalRdEv13 + $InbLocalRdEv14 + $InbLocalRdEv15)"> </metric>
        <metric name="Local Inbound Read Data Bytes(GB/s)" expression="(64 * $TotalInbLocalRdBw) / ($ElapsedTimeinUsMem * 1000)"> </metric>

        <!--LOCAL OUTBOUND WRITE DATA BYTES TO CPU-->
        <metric name="$TotalOutLocalWrBw" expression="($OutLocalWrEv0 + $OutLocalWrEv1 + $OutLocalWrEv2 + $OutLocalWrEv3 + $OutLocalWrEv4 + $OutLocalWrEv5 + $OutLocalWrEv6 + $OutLocalWrEv7 + $OutLocalWrEv8 + $OutLocalWrEv9 + $OutLocalWrEv10 + $OutLocalWrEv11 + $OutLocalWrEv12 + $OutLocalWrEv13 + $OutLocalWrEv14 + $OutLocalWrEv15)"> </metric>
        <metric name="Local Inbound Write Data Bytes (GB/s)" expression="(64 * $TotalOutLocalWrBw) / ($ElapsedTimeinUsMem * 1000)"> </metric>
        <metric name="Local Read Write Data Bytes (GB/s)" expression="(64 * ($TotalInbLocalRdBw + $TotalOutLocalWrBw)) / ($ElapsedTimeinUsMem * 1000)"> </metric>

        <!--REMOTE INBOUND READ DATA BYTES TO CPU-->
        <metric name="$TotalInbRemoteRdBw" expression="($InbRemoteRdEv0 + $InbRemoteRdEv1 + $InbRemoteRdEv2 + $InbRemoteRdEv3 + $InbRemoteRdEv4 + $InbRemoteRdEv5 + $InbRemoteRdEv6 + $InbRemoteRdEv7 + $InbRemoteRdEv8 + $InbRemoteRdEv9 + $InbRemoteRdEv10 + $InbRemoteRdEv11 + $InbRemoteRdEv12 + $InbRemoteRdEv13 + $InbRemoteRdEv14 + $InbRemoteRdEv15)"> </metric>
        <metric name="Remote Inbound Read Data Bytes(GB/s)" expression="(64 * $TotalInbRemoteRdBw) / ($ElapsedTimeinUsMem * 1000)"> </metric>

        <!--REMOTE OUTBOUND WRITE DATA BYTES TO CPU-->
        <metric name="$TotalOutRemotelWrBw" expression="($OutRemoteWrEv0 + $OutRemoteWrEv1 + $OutRemoteWrEv2 + $OutRemoteWrEv3 + $OutRemoteWrEv4 + $OutRemoteWrEv5 + $OutRemoteWrEv6 + $OutRemoteWrEv7 + $OutRemoteWrEv8 + $OutRemoteWrEv9 + $OutRemoteWrEv10 + $OutRemoteWrEv11 + $OutRemoteWrEv12 + $OutRemoteWrEv13 + $OutRemoteWrEv14 + $OutRemoteWrEv15)"> </metric>
        <metric name="Remote Outbound Write Data Bytes (GB/s)" expression="(64 * $TotalOutRemotelWrBw) / ($ElapsedTimeinUsMem * 1000)"> </metric>
        <metric name="Remote Read Write Data Bytes (GB/s)" expression="(64 * ($TotalInbRemoteRdBw + $TotalOutRemotelWrBw)) / ($ElapsedTimeinUsMem * 1000)"> </metric>

        <!--LOCAL OUTBOUND DATA BYTES FROM ALL LINKS-->
        <metric name="$TotalOutLocalWrBwAll" expression="($OutLocalAll0 + $OutLocalAll2 + $OutLocalAll3 + $OutLocalAll4 + $OutLocalAll5 + $OutLocalAll6 + $OutLocalAll7)"> </metric>
        <metric name="Remote Socket Outbound Data Bytes (GB/s)" expression="(64 * $TotalOutLocalWrBwAll) / ($ElapsedTimeinUsMem * 1000)"> </metric>
    </df>

</event_configuration>
